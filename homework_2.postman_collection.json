{
	"info": {
		"_postman_id": "63e0489e-f6b5-4e3a-8777-91b865a8eff9",
		"name": "homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23606431"
	},
	"item": [
		{
			"name": "HW_2_0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Проверить, что в body приходит правильный string.",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"",
							"//3. Спарсить request.",
							"var req = request.data",
							"let req_name = req.name",
							"let req_age = req.age ",
							"let req_salary = +req.salary ",
							"",
							"let res_salary_1_5 = req_salary*4",
							"",
							"//4. Вывести в консоль параметр family из response.",
							"console.log(\"family = \", jsonData.family)",
							"",
							"//5. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"name\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Alex\");",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"age\", function () {",
							"    pm.expect(jsonData.age).to.eql(\"24\");",
							"});",
							"",
							"//7. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(1000);",
							"});",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"req_name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req_name);",
							"});",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"req_age\", function () {",
							"    pm.expect(jsonData.age).to.eql(req_age);",
							"});",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"req_salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(req_salary);",
							"});",
							"",
							"//11. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"salary_1_5\", function () {",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary*4);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Спарсить response body в json.",
							"const jsonData = pm.response.json(); ",
							"let res_name = jsonData.name;",
							"let res_age = jsonData.age;",
							"let res_salary = String(jsonData.salary);",
							"let res_dog = jsonData.family.pets.dog ;",
							"let res_dog_name = jsonData.family.pets.dog.name",
							"let rest_dog_age = jsonData.family.pets.dog.age",
							"",
							"//3. Спарсить request.",
							"var req = pm.request.url.query.toObject()",
							"var req_name = req.name ",
							"var req_age = req.age ",
							"var req_salary = req.salary",
							"",
							"//4. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"name\", function () {",
							"    pm.expect(res_name).to.eql(req_name);",
							"});",
							"",
							"//5. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"age\", function () {",
							"    pm.expect(res_age).to.eql(req_age);",
							"});",
							"",
							"//6. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"salary\", function () {",
							"    pm.expect(res_salary).to.eql(req_salary);",
							"});",
							"",
							"//7. Вывести в консоль параметр family из response.",
							"console.log(\"family = \", jsonData.family)",
							"",
							"//8. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"dog_name\", function () {",
							"    pm.expect(res_dog).to.have.property(\"name\");",
							"});",
							"",
							"//9. Проверить, что у параметра dog есть параметры age",
							"pm.test(\"dog_age\", function () {",
							"    pm.expect(res_dog).to.have.property(\"age\");",
							"});",
							"",
							"//10. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"name_Luky\", function () {",
							"    pm.expect(res_dog_name).to.eql(\"Luky\");",
							"});",
							"",
							"//11. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"age_4\", function () {",
							"    pm.expect(rest_dog_age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "namr",
							"value": "Alex",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "24",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=24&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Спарсить response body в json.",
							"const jsonData = pm.response.json();",
							"var res_name = jsonData.name;",
							"var res_age = String(jsonData.age);",
							"var res_salary = jsonData.salary;",
							"//3. Спарсить request.",
							"const req = pm.request.url.query.toObject();",
							"var req_name = req.name;",
							"var req_age = req.age;",
							"var req_salary = req.salary;",
							"",
							"//4. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"name\", function () {",
							"    pm.expect(res_name).to.eql(req_name);",
							"});",
							"",
							"//5. Передать в окружение переменную name",
							"pm.environment.set(\"name\", req_name);",
							"//6. Передать в окружение переменную age",
							"pm.environment.set(\"age\", req_age);",
							"//7. Передать в окружение переменную salary",
							"pm.environment.set(\"salary_0\", req_salary);",
							"",
							"//8. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"age\", function () {",
							"    pm.expect(res_age).to.eql(req.age);",
							"});",
							"",
							"//9. Вывести в консоль параметр salary из response.",
							"console.log(\"salary_response = \", res_salary);",
							"",
							"//10. Вывести в консоль параметр salary из request.",
							"console.log(\"salary_request = \", req_salary)",
							"",
							"//11. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(\"salary_0 =\", res_salary[0] );",
							"",
							"//12. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(\"salary_1 =\", res_salary[1]);",
							"",
							"//13. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(\"salary_2 =\", res_salary[2]);",
							"",
							"//14. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"salary_0\", function () {",
							"    pm.expect(res_salary[0]).to.eql(+req_salary);",
							"});",
							"console.log(\"salary_res_0 =\", res_salary[0] == req_salary );",
							"",
							"//15. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"salary_1\", function () {",
							"    pm.expect(+res_salary[1]).to.eql(req_salary*2);",
							"});",
							"console.log(\"salary_res_1 =\", res_salary[1] == req_salary*2);",
							"",
							"//16. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"salary_2\", function () {",
							"    pm.expect(+res_salary[2]).to.eql(req_salary*3);",
							"});",
							"console.log(\"salary_res_2 =\", res_salary[2] == req_salary*3);",
							"",
							"// 17. Создать в окружении переменную name и передать значение name",
							"pm.environment.set('name', req_name);",
							"",
							"// 18. Создать в окружении переменную age и передать значение age",
							"pm.environment.set('age', req_age);",
							"",
							"// 19. Создать в окружении переменную salary и передать значение salary",
							"pm.environment.set('salary', req_salary);",
							"",
							"// 20. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (let i = 0; i < res_salary.length; i++) {",
							"    console.log(res_salary[i]);",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=24&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Спарсить response body в json.",
							"const jsonData = pm.response.json()",
							"var res_person = jsonData.person;",
							"var res_age = jsonData.person.u_age;",
							"var res_name = jsonData.person.u_name[0];",
							"var res_salary = jsonData.person.u_name[1];",
							"var res_salary_5 = jsonData.person.u_salary_5_years;",
							"var res_qa_salary_1_5 = jsonData[\"qa_salary_after_1.5_year\"];",
							"var res_qa_salary_12 = jsonData.qa_salary_after_12_months;",
							"var res_qa_salary_3_5 = jsonData[\"qa_salary_after_3.5_years\"];",
							"var res_qa_salary_6 = jsonData.qa_salary_after_6_months;",
							"var res_qa_salary = jsonData.start_qa_salary;",
							"",
							"//3. Спарсить request.",
							"const req = request.data;",
							"var req_age = parseInt(req.age);",
							"var req_name = req.name;",
							"var req_salary = parseInt(req.salary);",
							"",
							"// console.log(typeof req_salary)",
							"",
							"//4. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"qa start salary\", function () {",
							"    pm.expect(jsonData).to.have.property('start_qa_salary');",
							"});",
							"",
							"//5. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"salary 6 mounth\", function () {",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');",
							"});",
							"",
							"//6. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"salary 12 mounth\", function () {",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');",
							"});",
							"",
							"//7. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"salary 1.5 year\", function () {",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');",
							"});",
							"",
							"//8. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"salary 3.5 years\", function () {",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр person",
							"pm.test(\"person\", function () {",
							"    pm.expect(jsonData).to.have.property('person');",
							"});",
							"",
							"//10. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"salary\", function () {",
							"    pm.expect(res_qa_salary).to.eql(req_salary);",
							"});",
							"",
							"//11. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"u salary 6\", function () {",
							"    pm.expect(res_qa_salary_6).to.eql(req_salary*2);",
							"});",
							"",
							"//12. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"u salary 12\", function () {",
							"    pm.expect(res_qa_salary_12).to.eql(req_salary*2.7);",
							"});",
							"",
							"//13. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"u salary 1.5 \", function () {",
							"    pm.expect(res_qa_salary_1_5).to.eql(req_salary*3.3);",
							"});",
							"",
							"//14. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"u salary 3.5\", function () {",
							"    pm.expect(res_qa_salary_3_5).to.eql(req_salary*3.8);",
							"});",
							"",
							"//15. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"person[1]\", function () {",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(req_salary);",
							"});",
							"",
							"//16. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"age\", function () {",
							"    pm.expect(res_age).to.eql(req_age);",
							"});",
							"",
							"//17. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"u salary 5 \", function () {",
							"    pm.expect(res_salary_5).to.eql(req_salary*4.2);",
							"});",
							"",
							"",
							"",
							"",
							"for (i in res_person) {",
							"    if (Array.isArray(res_person[i])) {",
							"    res_person[i].forEach(value => console.log(`${i}: ${value}`));",
							"} else {",
							"console.log(`${i}: ${res_person[i]}`);",
							"}",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_0}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex",
							"disabled": true
						},
						{
							"key": "age",
							"value": "24",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}